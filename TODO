- Add support for PUT
  * need to add support for HTTP PUT, I think this might be a bit tricky since PUT requires CURLOPT_READDATA which requires a FILE * handle...now I suppose it would be possible to write to a temp file somewhere or require the caller to specify a file handle (like in user land php curl).
  pros for creating a temp file:
    - won't need to have the user mess around with writing the file somewhere themselves
  cons for creating a temp file:
    - everything that may go wrong with creating temp files...
  pros for forcing the user to pass in a file handle:
    - we don't have to do anything other than point libcurl to the file handle
  cons for forcing the user to pass in a file handle:
    - harder for users, the whole point of this ext is to simplify the php user land interface so this is a sticking point
  * of course I maybe completely wrong about my understanding of PUT in libcurl so feel free to /d this entire section
  * will probably need to separate out the auth type and http method completely, thinking something in the order of:
    $o->setArgs(array("param_name" => "value"),"POST");
    $o->setArgs('{"message": "Hello World"}',"PUT");

- Respect param precedence,
  * This ext does not currently care to respect parameter precedence, in the sense that if a common param is defined in POST/GET or Authorization header, the precendence is defined by: OAuth Core 1.0 section 9.1.1

- Add tests
  * need there be anymore said?

- Add docs
  * example code is great but real docs help too

- Allow runtime setting of Expect header for POST requests
  * Don't know if always disabling the Expect header is going to have a big enough impact, if it does, we'll need to allow setting it dynamically for API's which can't handle it properly
